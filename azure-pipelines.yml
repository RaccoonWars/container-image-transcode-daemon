# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: "1.$(date:yyMM)$(rev:.r)"

trigger:
  batch: true
  branches:
    include:
      - main
      
pool: "BurienStation-Kubernetes"

stages:
- stage: Build 
  displayName: Build and Publish Image of Transcode Daemon
  jobs:  
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: 'Push-Location $(Build.SourcesDirectory); Get-ChildItem -Recurse'
    
    - task: DotNetCoreCLI@2
      displayName: "Build Transocde Daemon"
      inputs:
        command: 'build'
        projects: '$(Build.SourcesDirectory)/**/*.csproj'
        arguments: 'publish -c Release'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: 'Push-Location $(Build.SourcesDirectory); Get-ChildItem -Recurse'

    - task: Docker@2
      displayName: "Dockerize Transcode Daemon"
      inputs:
        containerRegistry: 'DockerHub-RaccoonWars'
        repository: 'raccoonwars/transocde'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/src/Transcode/dockerfile'
        buildContext: '$(Build.SourcesDirectory)/'
        tags: |
          $(Build.BuildNumber)
          latest

    - task: CopyFiles@2
      displayName: "Copy build files to artifact staging directory ($(Build.SourcesDirectory) => $(Build.ArtifactStagingDirectory))"
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
        OverWrite: true
      condition: failed()

    - task: PublishBuildArtifacts@1
      displayName: "Publish Artifact folder to Azure Artifacts"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      condition: failed()